-----------------------------------------------------------------
import java.util.Scanner;
class BinaryTree {

    public BinaryTree() {

    }

    private static class Node {
        int value;
        Node left;
        Node right;

        public Node(int value) {
        this.value = value;
        }
    }

    private Node root;

    // insert elements
    public void populate(Scanner scanner) {
        System.out.println("Enter the root Node: ");
        int value = scanner.nextInt();
        root = new Node(value);
        populate(scanner, root);
    }

    private void populate(Scanner scanner, Node node) {
        System.out.println("Do you want to enter left of " + node.value);
        boolean left = scanner.nextBoolean();
        if (left) {
        System.out.println("Enter the value of the left of " + node.value);
        int value = scanner.nextInt();
        node.left = new Node(value);
        populate(scanner, node.left);
        }

        System.out.println("Do you want to enter right of " + node.value);
        boolean right = scanner.nextBoolean();
        if (right) {
        System.out.println("Enter the value of the right of " + node.value);
        int value = scanner.nextInt();
        node.right = new Node(value);
        populate(scanner, node.right);
        }

    }

    public void display() {
        display(this.root, "");
    }

    private void display(Node node, String indent) {
        if (node == null) {
        return;
        }
        System.out.println(indent + node.value);
        display(node.left, indent + "\t");
        display(node.right, indent + "\t");
    }

    public void prettyDisplay() {
        prettyDisplay(root, 0);
    }

    private void prettyDisplay(Node node, int level) {
        if (node == null) {
        return;
        }

        prettyDisplay(node.right, level + 1);

        if (level != 0) {
        for (int i = 0; i < level - 1; i++) {
            System.out.print("|\t\t");
        }
        System.out.println("|------->" + node.value);
        } else {
        System.out.println(node.value);
        }
        prettyDisplay(node.left, level + 1);
    }

    public void preOrder() {
        preOrder(root);
    }

    private void preOrder(Node node) {
        if (node == null) {
        return;
        }
        System.out.print(node.value + " ");
        preOrder(node.left);
        preOrder(node.right);
    }

    public void inOrder() {
        preOrder(root);
    }

    private void inOrder(Node node) {
        if (node == null) {
        return;
        }
        preOrder(node.left);
        System.out.print(node.value + " ");
        preOrder(node.right);
    }

    public void postOrder() {
        preOrder(root);
    }

    private void postOrder(Node node) {
        if (node == null) {
        return;
        }
        preOrder(node.left);
        preOrder(node.right);
        System.out.print(node.value + " ");
    }
}
-----------------------------------------------------------------
class BST {
  public class Node {
    private int value;
    private Node left;
    private Node right;
    private int height;

    public Node(int value) {
      this.value = value;
    }

    public int getValue() {
      return value;
    }
  }

  private Node root;

  public BST() {

  }

  public int height(Node node) {
    if (node == null) {
      return -1;
    }
    return node.height;
  }

  public boolean isEmpty() {
    return root == null;
  }

  public void insert(int value) {
    root = insert(value, root);
  }

  private Node insert(int value, Node node) {
    if (node == null) {
      node = new Node(value);
      return node;
    }

    if (value < node.value) {
      node.left = insert(value, node.left);
    }

    if (value > node.value) {
      node.right = insert(value, node.right);
    }

    node.height = Math.max(height(node.left), height(node.right)) + 1;
    return node;
  }

  public void populate(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
      this.insert(nums[i]);
    }
  }

  public void populatedSorted(int[] nums) {
    populatedSorted(nums, 0, nums.length);
  }

  private void populatedSorted(int[] nums, int start, int end) {
    if (start >= end) {
      return;
    }

    int mid = (start + end) / 2;

    this.insert(nums[mid]);
    populatedSorted(nums, start, mid);
    populatedSorted(nums, mid + 1, end);
  }

  public boolean balanced() {
    return balanced(root);
  }

  private boolean balanced(Node node) {
    if (node == null) {
      return true;
    }
    return Math.abs(height(node.left) - height(node.right)) <= 1 && balanced(node.left) && balanced(node.right);
  }

  public void display() {
    display(this.root, "Root Node: ");
  }

  private void display(Node node, String details) {
    if (node == null) {
      return;
    }
    System.out.println(details + node.value);
    display(node.left, "Left child of " + node.value + " : ");
    display(node.right, "Right child of " + node.value + " : ");
  }

}
-----------------------------------------------------------------
import java.util.Scanner;

public class Main {
  public static void main(String[] args) {
    // Scanner scanner = new Scanner(System.in);
    // BinaryTree tree = new BinaryTree();
    // tree.populate(scanner);
    // tree.prettyDisplay();

    BST tree = new BST();
    int[] nums = { 5, 2, 7, 1, 4, 6, 9, 8, 3, 10 };
    tree.populate(nums);
    tree.display();
  }
}
-----------------------------------------------------------------
class BFS {
  public List<List<Integer>> levelOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<>();

    if (root == null) {
      return result;
    }

    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);

    while (!queue.isEmpty()) {
      int levelSize = queue.size();
      List<Integer> currentLevel = new ArrayList<>(levelSize);
      for (int i=0; i < levelSize; i++) {
        TreeNode currentNode = queue.poll();
        currentLevel.add(currentNode.val);
        if (currentNode.left != null) {
          queue.offer(currentNode.left);
        }
        if (currentNode.right != null) {
          queue.offer(currentNode.right);
        }
      }
      result.add(currentLevel);
    }
    return result;
  }

  public List<Integer> rightSideView(TreeNode root) {
    List<Integer> result = new ArrayList<>();

    if (root == null) {
      return result;
    }

    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);

    while (!queue.isEmpty()) {
      int levelSize = queue.size();

      for (int i=0; i < levelSize; i++) {
        TreeNode currentNode = queue.poll();

        if (i == levelSize - 1) {
          result.add(currentNode.val);
        }
        
        if (currentNode.left != null) {
          queue.offer(currentNode.left);
        }
        if (currentNode.right != null) {
          queue.offer(currentNode.right);
        }
      }
    }
    return result;
  }

  public List<Double> averageOfLevels(TreeNode root) {
    List<Double> result = new ArrayList<>();

    if (root == null) {
      return result;
    }

    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);

    while (!queue.isEmpty()) {
      int levelSize = queue.size();
      double averageLevel = 0;
      for (int i=0; i < levelSize; i++) {
        TreeNode currentNode = queue.poll();
        averageLevel += currentNode.val;
        if (currentNode.left != null) {
          queue.offer(currentNode.left);
        }
        if (currentNode.right != null) {
          queue.offer(currentNode.right);
        }
      }
        averageLevel = averageLevel / levelSize;
        result.add(averageLevel);
    }
    return result;
  }

  public TreeNode findSuccessor(TreeNode root, int key){
    if (root == null) {
      return null;
    }

    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);

    while (!queue.isEmpty()) {
      int levelSize = queue.size();
        TreeNode currentNode = queue.poll();
        if (currentNode.left != null) {
          queue.offer(currentNode.left);
        }
        if (currentNode.right != null) {
          queue.offer(currentNode.right);
        }
        if (currentNode.val = key) {
          break;
        }
    }
    return queue.peek(); 
  }

  public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<>();

    if (root == null) {
      return result;
    }

    Deque<TreeNode> queue = new LinkedList<>();
    queue.add(root);

    boolean reverse = false;
    
    while (!queue.isEmpty()) {
      int levelSize = queue.size();
      List<Integer> currentLevel = new ArrayList<>(levelSize);
      for (int i=0; i < levelSize; i++) {
        if (!reverse) {
          TreeNode currentNode = queue.pollFirst();
          currentLevel.add(currentNode.val);
          if (currentNode.left != null) {
            queue.addLast(currentNode.left);
          }
          if (currentNode.right != null) {
            queue.addLast(currentNode.right);
          }
        } else {
          TreeNode currentNode = queue.pollLast();
          currentLevel.add(currentNode.val);
          if (currentNode.right != null) {
            queue.addFirst(currentNode.right);
          }
          if (currentNode.left != null) {
            queue.addFirst(currentNode.left);
          }
        }
      }
      reverse = !reverse;
      result.add(currentLevel);
    }
    return result;
  }


  public Node connect(Node root) {
    if (root == null){
      return null;
    }

    Node leftMost = root;

    while (leftMost.left != null) {
      Node current = leftMost;
      while(current != null) {
        current.left.next = current.right;
        if(current.next != null) {
          current.right.next = current.next.left;
        }
        current = current.next;
      }
      leftMost = leftMost.left;
    }
    return root;
  }


  public boolean isCousins(TreeNode root, int x, int y) {
    TreeNode xx = findNode(root, x);
    TreeNode yy = findNode(root, y);

    return (
      (level(root, xx, 0) == level(root, yy, 0)) && (!isSibling(root, xx, yy))
    );
  }

  TreeNode findNode(TreeNode node, int x) {
    if (node == null) {
      return null;
    }
    if (node.val == x) {
      return node;
    }
    TreeNode n = findNode(node.left, x);
    if (n != null) {
      return n;
    }
    return findNode(node.right, x);
  }

  boolean isSibling (TreeNode node, TreeNode x, TreeNode y) {
    if (node == null) {
      return false;
    }

    return (
      (node.left == x && node.right == y) || (node.left == y && node.right == x)
      || isSibling(node.left, x, y) || isSibling(node.right, x, y)
    );
  }

  int level (TreeNode node, TreeNode x, int lev) {
    if(node == null) {
      return 0;
    }

    if(node == x) {
      return lev;
    }

    int l = level(node.left, x, lev+1);
    if (l != 0) {
      return l;
    }
    return level(node.right, x, lev+1);
  }

  public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root.left);
    queue.add(root.right);

    while(!queue.isEmpty()) {
      TreeNode left = queue.poll();
      TreeNode right = queue.poll();

      if(left == null && right == null) {
        continue;
      }
      
      if(left == null || right == null) {
        return false;;
      }

      if (left.val != right.val) {
        return false;
      }

      queue.add(left.left);
      queue.add(right.right);
      queue.add(left.right);
      queue.add(right.left);
      
    }
    return true;
  }

  
  
}
-----------------------------------------------------------------
class DFS {

  // dfs using stack
  void dfsStack(Node node) {
    if(node == null) {
      return;
    }
    Stack<Node> stack = new Stack<>();
    stack.push(node);

    while(!stack.isEmpty()) {
      Node removed = stack.pop();
      System.out.print(removed.val + " ");
      if(removed.right != null) {
        stack.push(removed.right);
      }
      if(removed.left != null) {
        stack.push(removed.left);
      }
    }
  }

  int diameter = 0;
  public int diameterOfBinaryTree(TreeNode root) {
    height(root);
    return diameter-1;
  }
  int height(TreeNode node) {
    if(node == null) {
      return 0;
    }

    int leftHeight = height(node.left);
    int rightHeight = height(node.right);

    int dia = leftHeight + rightHeight + 1;
    diameter = Math.max(diameter, dia);

    return Math.max(leftHeight, rightHeight) + 1;
    
  }


  public TreeNode invertTree(TreeNode root) {
    if (root == null) {
      return null;
    }

    TreeNode left = invertTree(root.left);
    TreeNode right = invertTree(root.right);

    root.left = right;
    root.right = left;

    return root;
  }

  public void flatten(TreeNode root) {
    TreeNode current = root;
    while (current != null) {
      if (current.left != null) {
        TreeNode temp = current.left;
        while(temp.right != null) {
          temp = temp.right;
        }

        temp.right = current.right;
        current.right = current.left;
        current.left= null;
      }
      current = current.right;
    }
    
  }

  public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);
  }
  public boolean helper(TreeNode node, Integer low, Integer high) {
    if (node == null) {
      return true;
    }

    if (low != null && node.val <= low) {
      return false;
    }

    if(high != null && node.val >= high) {
      return false;
    }

    boolean leftTree = helper(node.left, low, node.val);
    boolean rightTree = helper(node.right, node.val, high);

    return leftTree && rightTree;
    
  }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
      if (root == null) {
        return null;
      }

      if (root == p || root == q) {
        return root;
      }

      TreeNode left = lowestCommonAncestor(root.left, p, q);
      TreeNode right = lowestCommonAncestor(root.right, p, q);

      if (left != null && right != null) {
        return root;
      }

      return left == null ? right : left;

    }
  
    int count = 0;
    public int kthSmallest(TreeNode root, int k) {
        return helper(root, k).val;
    }
    public TreeNode helper(TreeNode root, int k) {
      if (root == null) {
        return null;
      }
  
      TreeNode left = helper(root.left, k);

      if (left != null) {
        return left;
      }

      count++;

      if(count == k) {
        return root;
      }

      return helper(root.right, k);
    }

    public TreeNode buildTree(int[] preorder, int[] inorder) {

      if (preorder.length == 0) {
        return null;
      }

      int r = pre[0];
      int index = 0;

      for(int i=0; i<inorder.length; i++) {
        if(inorder[i] == r) {
          index = i;
        }
      }

      Node node = new Node(r);

      node.left = buildTree(Arrays.copyOfRange(preorder, 1, index + 1), Arrays.copyOfRange(inorder, 0, index));
      node.right = buildTree(Arrays.copyOfRange(preorder, index + 1, preorder.length), Arrays.copyOfRange(inorder, index + 1, inorder.length));

      return node;
        
    }
  
}
-----------------------------------------------------------------
class PathSum {
  public boolean hasPathSum(TreeNode root, int sum) {
    if (root == null) {
      return false;
    }
    if (root.val == sum && root.left == null && root.right == null) {
      return true;
    }
    return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);
  }

  public int sumNumbers(TreeNode root) {
    return helper(root, 0);
  }
  int helper(TreeNode node, int sum) {
    if(node == null) {
      return 0;
    }
    sum = sum * 10 + node.val;
    if (node.left == null && node.right == null) {
      return sum;
    }
    return helper(node.left, sum) + helper(node.right, sum);
  }

  int ans = Integer.MIN_VALUE;
  public int maxPathSum(TreeNode root) {
      helper(root);
      return ans;
  }
  int helper(TreeNode node) {
    if(node == null) {
      return 0;
    }

    int left = helper(node.left);
    int right = helper(node.right);

    left = Math.max(0, left);
    right = Math.max(0, right);

    int pathSum = left + right + node.val;

    ans = Math.max(ans, pathSum);

    return Math.max(left, right) + node.val;
  }

  boolean findPath(Node node, int[] arr) {
    if (node == null) {
      return arr.length == 0;
    }
    return helper(node, arr, 0);
  }
  boolean helper(Node node, int[] arr, int index) {
    if(node == null) {
      return false;
    }
    if(index >= arr.length || node.val != arr[index]) {
      return false;
    }
    if(node.left == null && node.right == null && index = arr.length - 1) {
      return true;
    } 
    return helper(node.left, arr, index + 1) || helper(node.right, arr, index + 1);
  }

  int countPaths(Node node, int sum) {
    List<Integer> path = new ArrayList<>();
    return helper(node, sum, path);
  }
  int helper(Node node, int sum, List<Integer> path) {
    if(node == null) {
      return 0;
    }

    path.add(node.val);
    int count = 0;
    int s = 0;
    // how many paths I can make
    ListIterator<Integer> itr = path.listIterator(path.size());
    while (itr.hashPrevious()) {
      s += itr.previous();

      if (s == sum) {
        count++;
      }
    }

    count += helper(node.left, s, path) + helper(node.right, sum, path);

    // backtrack
    path.remove(path.size() - 1);
    return count;
    
  }

  // put in a list
  List<List<Integer>> findPaths(Node node, int sum) {
    List<List<Integer>> paths = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    helper(node, sum, path);
    return paths;
  }
  void helper(Node node, int sum, List<Integer> path, List<List<Integer>> paths) {
    if(node == null) {
      return 0;
    }

    path.add(node.val);

    if (node.val == sum && node.left == null && node.right == null) {
      paths.add(new ArrayList<>(path));
    } else {
      helper(node.left, sum-node.val, path, paths);
      helper(node.right, sum-node.val, path, paths);
    }

    // backtrack
    path.remove(path.size() - 1);    
  }  
}
-----------------------------------------------------------------
// https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

class SD {
  public List<String> serialize(Node node) {
    List<String> list = new ArrayList<>();
    helper(node, list);
    return list;
  }
  void helper(Node node, List<String> list) {
    if (node == null) {
      list.add("null");
      return;
    }  
    
    list.add(String.valueOf(node.val));

    helper(node.left, list);
    helper(node.right, list);
  }

  Node deserialize(List<String> list) {
    Collections.reverse(list);
    Node node = helper2(list);
    return node;
  }
  Node helper(List<String> list) {
    String val = list.remove(list.size() - 1);

    if (val.charAt(0) == 'n') {
      return null;
    }
    
    Node node = new Node(Integer.parseInt(val));

    node.left = helper2(list);
    node.right = helper2(list);

    return node;
  }
}
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
https://leetcode.com/problems/same-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        return isSame(p,q);
    }
    public boolean isSame(TreeNode n1, TreeNode n2) {
        if(n1==null && n2==null){
            return true;
        }
        if(n1==null){
            return false;
        }
        if(n2==null){
            return false;
        }
        if(n1.val!=n2.val){
            return false;
        }
        return isSame(n1.left, n2.left) && isSame(n1.right, n2.right);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/symmetric-tree/ imp
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return root==null || isSymmetricHelp(root.left, root.right);
    }

    private boolean isSymmetricHelp(TreeNode left, TreeNode right){
        if(left==null || right==null)
            return left==right;
        if(left.val!=right.val)
            return false;
        return isSymmetricHelp(left.left, right.right) && isSymmetricHelp(left.right, right.left);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/maximum-depth-of-binary-tree/ - can also be called diameter of tree (imp)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        // Base case...
        // If the subtree is empty i.e. root is NULL, return depth as 0...
        if(root == null)  return 0;
        // if root is not NULL, call the same function recursively for its left child and right child...
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        // When the two child function return its depth...
        // Pick the maximum out of these two subtrees and return this value after adding 1 to it...
        return Math.max(leftDepth, rightDepth) + 1;    // Adding 1 is the current node which is the parent of the two subtrees...
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/balanced-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        // Call the dfsHeight function to get the height of the tree
        // If the returned value is -1, the tree is not balanced
        // Otherwise, it is balanced
        return dfsHeight(root) != -1;
    }
    public static int dfsHeight(TreeNode root){

        // Base case: If the root is null, the height is 0
        if(root == null){
            return 0;
        }
    
        // Recursively get the height of the left subtree
        int leftHeight = dfsHeight(root.left);

        // If the left subtree is not balanced, return -1
        if(leftHeight == -1){
            return -1;
        }
    
        // Recursively get the height of the right subtree
        int rightHeight = dfsHeight(root.right);
        
        // If the right subtree is not balanced, return -1
        if(rightHeight == -1){
            return -1;
        }
    
        // If the absolute difference between the left and right subtree heights
        // is greater than 1, the tree is not balanced, so return -1
        if(Math.abs(leftHeight - rightHeight) > 1){
            return -1;
        }
    
        // Otherwise, return the maximum height of the left and right subtrees, plus 1
        // This represents the height of the current node
    return Math.max(leftHeight,rightHeight)+1;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/minimum-depth-of-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        //base case
       if (root == null)
            return 0;
		//if there is only right child get depth of it
        if (root.left == null)
            return minDepth(root.right) + 1;
		//similarly if there is only left child  get depth of it
        else if (root.right == null)
            return minDepth(root.left) + 1;
		//in case there are both  get the min of both
        return Math.min(minDepth(root.right), minDepth(root.left)) + 1; 
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-tree-preorder-traversal/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       List<Integer> ret = new ArrayList<>();
        dfs(root, ret);
        return ret; 
    }
    private void dfs(TreeNode root, List<Integer> ret) {
        if (root != null) {
            ret.add(root.val);
            dfs(root.left, ret);
            dfs(root.right, ret);
        }
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-tree-postorder-traversal/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        dfs(root, ret);
        return ret;
    }
    private void dfs(TreeNode root, List<Integer> ret) {
        if (root != null) {
            dfs(root.left, ret);
            dfs(root.right, ret);
            ret.add(root.val);
        }
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/path-sum/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null)return false;
        sum = sum - root.val;
        if(root.left==null && root.right==null){
            if(sum == 0)return true;
            else return false;
        }
        return hasPathSum(root.left,sum) || hasPathSum(root.right,sum);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/sum-of-left-leaves/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum=0;
    public int sumOfLeftLeaves(TreeNode root) { 
        helper(root,false);
        return sum;
    }
    public void helper(TreeNode root,boolean isLeft)
    {
        if(root==null ) return;    
        if(root.left==null && root.right==null)
        {
            if(isLeft)
            sum+=root.val;
        }
        helper(root.left,true);
        helper(root.right,false);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/minimum-absolute-difference-in-bst/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
       TreeNode prev;
        int min = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        inorder(root);
        return min;
    }
    public void inorder(TreeNode root){
        if(root == null) return;

        inorder(root.left);
        if(prev != null) min = Math.min(min, root.val - prev.val);
        prev = root;
        inorder(root.right);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-tree-paths/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> answer = new ArrayList<String>();
        if (root != null) searchBT(root, "", answer);
        return answer;
    }
    private void searchBT(TreeNode root, String path, List<String> answer) {
        if (root.left == null && root.right == null) answer.add(path + root.val);
        if (root.left != null) searchBT(root.left, path + root.val + "->", answer);
        if (root.right != null) searchBT(root.right, path + root.val + "->", answer);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/find-mode-in-binary-search-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Integer prev=null;
    int count=1;
    int max=0;
    public int[] findMode(TreeNode root) {
        if(root==null){
            return new int []{};
        }
        ArrayList<Integer> nums=new ArrayList<>();
        getNodes(root,nums);
        int temp[]=new int [nums.size()];
        for(int i=0;i<nums.size();i++){
            temp[i]=nums.get(i);
        }
        return temp;
    }
    public void getNodes(TreeNode root,ArrayList<Integer> nums){
        if(root==null) return;
        getNodes(root.left,nums);
        if(prev!=null){
            if(prev==root.val) count++;
            else count=1;
        }
        if(count>max){
            nums.clear();
            max=count;
            nums.add(root.val);
        }
        else if(count==max){
            nums.add(root.val);
        }
        prev=root.val;
        getNodes(root.right,nums);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/invert-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        // Base case: if the tree is empty...
        if(root == null){
            return root;
        }
        // Call the function recursively for the left subtree...
        invertTree(root.left);
        // Call the function recursively for the right subtree...
        invertTree(root.right);
        // Swapping process...
        TreeNode curr = root.left;
        root.left = root.right;
        root.right = curr;
        return root;       
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-tree-level-order-traversal/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> CurrentLevel = new ArrayList<>(levelSize);
            for (int i = 0; i<levelSize; i++){
                TreeNode currentNode = queue.poll();
                CurrentLevel.add(currentNode.val);
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
            result.add(CurrentLevel);
        }
        return result;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/path-sum-ii/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> paths = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    helper(root, targetSum, path, paths);
    return paths;
  }
  public void helper(TreeNode node, int sum, List<Integer> path, List<List<Integer>> paths) {
    if(node == null) {
      return;
    }

    path.add(node.val);

    if (node.val == sum && node.left == null && node.right == null) {
      paths.add(new ArrayList<>(path));
    } else {
      helper(node.left, sum-node.val, path, paths);
      helper(node.right, sum-node.val, path, paths);
    }

    // backtrack
    path.remove(path.size() - 1);    
    }
}
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
