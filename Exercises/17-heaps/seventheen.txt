import java.util.ArrayList;

class Heap<T extends Comparable<T>> {

  public static void main(String[] args) throws Exception{
    Heap<Integer> heap = new Heap<>();

    heap.insert(34);
    heap.insert(45);
    heap.insert(22);
    heap.insert(89);
    heap.insert(76);

    ArrayList list = heap.heapSort();
    System.out.println(list);

  }

  private ArrayList<T> list;

  public Heap() {
    list = new ArrayList<>();
  }

  private void swap(int first, int second) {
    T temp = list.get(first);
    list.set(first, list.get(second));
    list.set(second, temp);
  }

  private int parent(int index) {
    return (index - 1) / 2;
  }

  private int left(int index) {
    return index * 2 + 1;
  }
  
  private int right(int index) {
    return index * 2 + 2;
  }

  public void insert(T value) {
    list.add(value);
    upheap(list.size() - 1);
  }
  private void upheap(int index) {
    if(index == 0) {
      return;
    }
    int p = parent(index);
    if(list.get(index).compareTo(list.get(p)) < 0) {
      swap(index, p);
      upheap(p);
    }
  }

  public T remove() throws Exception {
    if (list.isEmpty()) {
      throw new Exception("Removing from an empty heap!");
    }

    T temp = list.get(0);

    T last = list.remove(list.size() - 1);
    if (!list.isEmpty()) {
      list.set(0, last);
      downheap(0);
    }
    
    return temp;
  }
  private void downheap(int index) {
    int min = index;
    int left = left(index);
    int right = right(index);

    if(left < list.size() && list.get(min).compareTo(list.get(left)) > 0) {
      min = left;
    }

    if(right < list.size() && list.get(min).compareTo(list.get(right)) > 0) {
      min = right;
    }

    if(min != index) {
      swap(min, index);
      downheap(min);
    }
  }

  public ArrayList<T> heapSort() throws Exception {
    ArrayList<T> data = new ArrayList<>();
    while(!list.isEmpty()) {
      data.add(this.remove());
    }
    return data;
  }
}
-----------------------------------------------------------------
TwoHeaps algo - important, please revise
--------------
import java.util.ArrayList;

public class TwoHeaps {
    MinHeap<Integer> hi = new MinHeap<>();
    MaxHeap<Integer> lo = new MaxHeap<>();
    public static void main(String[] args) throws Exception {
        TwoHeaps twoHeaps = new TwoHeaps();
        int[] arr = {1,4,2,5,3,6,9,11};
        for( int i = 0; i< arr.length; i++){
            twoHeaps.addNum(arr[i]);
        }
        System.out.println(twoHeaps.findMedian());
    }
    public void addNum(int num) throws Exception{
        lo.insert(num);
        hi.insert(lo.poll());
        lo.remove();
        if(lo.getSize()<hi.getSize()){
            lo.insert(hi.poll());
            hi.remove();
        }
    }
    public Double findMedian() throws Exception{
        return lo.getSize()>hi.getSize() ? lo.poll() : (double)((lo.poll() + hi.poll())*0.5);
    }
}

class MaxHeap<T extends Comparable<T>> {
    private ArrayList<T> list;

    public MaxHeap() {
        list = new ArrayList<>();
    }

    public int getSize(){
        return list.size();
    }

    private void swap(int first, int second) {
        T temp = list.get(first);
        list.set(first, list.get(second));
        list.set(second, temp);
    }

    private int parent(int index) {
        return (index - 1) / 2;
    }

    private int left(int index) {
        return index * 2 + 1;
    }

    private int right(int index) {
        return index * 2 + 2;
    }

    public void insert(T value) {
        list.add(value);
        upheap(list.size() - 1);
    }

    private void upheap(int index) {
        if(index == 0) {
            return;
        }
        int p = parent(index);
        if(list.get(index).compareTo(list.get(p)) < 0) {
            swap(index, p);
            upheap(p);
        }
    }

    public T poll() throws Exception {
        if (list.isEmpty()) {
            throw new Exception("Polling from an empty heap!");
        }
        return list.get(0);
    }

    public T remove() throws Exception {
        if (list.isEmpty()) {
            throw new Exception("Removing from an empty heap!");
        }

        T temp = list.get(0);

        T last = list.remove(list.size() - 1);
        if (!list.isEmpty()) {
            list.set(0, last);
            downheap(0);
        }

        return temp;
    }

    private void downheap(int index) {
        int min = index;
        int left = left(index);
        int right = right(index);

        if(left < list.size() && list.get(min).compareTo(list.get(left)) > 0) {
            min = left;
        }

        if(right < list.size() && list.get(min).compareTo(list.get(right)) > 0) {
            min = right;
        }

        if(min != index) {
            swap(min, index);
            downheap(min);
        }
    }

    public ArrayList<T> heapSortAsc() throws Exception {
        ArrayList<T> data = new ArrayList<>();
        while(!list.isEmpty()) {
            data.add(this.remove());
        }
        return data;
    }
}

class MinHeap<T extends Comparable<T>> {
    private ArrayList<T> list;

    public MinHeap() {
        list = new ArrayList<>();
    }

    public int getSize(){
        return list.size();
    }

    private void swap(int first, int second) {
        T temp = list.get(first);
        list.set(first, list.get(second));
        list.set(second, temp);
    }

    private int parent(int index) {
        return (index - 1) / 2;
    }

    private int left(int index) {
        return index * 2 + 1;
    }

    private int right(int index) {
        return index * 2 + 2;
    }

    public void insert(T value) {
        list.add(value);
        upheap(list.size() - 1);
    }

    private void upheap(int index) {
        if(index == 0) {
            return;
        }
        int p = parent(index);
        if(list.get(index).compareTo(list.get(p)) > 0) {
            swap(index, p);
            upheap(p);
        }
    }

    public T poll() throws Exception {
        if (list.isEmpty()) {
            throw new Exception("Polling from an empty heap!");
        }
        return list.get(0);
    }

    public T remove() throws Exception {
        if (list.isEmpty()) {
            throw new Exception("Removing from an empty heap!");
        }

        T temp = list.get(0);

        T last = list.remove(list.size() - 1);
        if (!list.isEmpty()) {
            list.set(0, last);
            downheap(0);
        }

        return temp;
    }

    private void downheap(int index) {
        int min = index;
        int left = left(index);
        int right = right(index);

        if(left < list.size() && list.get(min).compareTo(list.get(left)) < 0) {
            min = left;
        }

        if(right < list.size() && list.get(min).compareTo(list.get(right)) < 0) {
            min = right;
        }

        if(min != index) {
            swap(min, index);
            downheap(min);
        }
    }

    public ArrayList<T> heapSortDesc() throws Exception {
        ArrayList<T> data = new ArrayList<>();
        while(!list.isEmpty()) {
            data.add(this.remove());
        }
        return data;
    }
}
-----------------------------------------------------------------
K-Way Merge algo
----------------
import java.util.ArrayList;
import java.util.PriorityQueue;

public class KWayMerge {
    private static class HeapNode implements Comparable<HeapNode> {
        int x;
        int y;
        int value;

        HeapNode(int x, int y, int value)
        {
            this.x = x;
            this.y = y;
            this.value = value;
        }

        @Override 
        public int compareTo(HeapNode hn)
        {
            if (this.value <= hn.value) {
                return -1;
            }
            else {
                return 1;
            }
        }
    }

    // Function to merge k sorted arrays.
    public static ArrayList<Integer>
    mergeKArrays(int[][] arr, int K)
    {
        ArrayList<Integer> result = new ArrayList<Integer>();
        PriorityQueue<HeapNode> heap = new PriorityQueue<HeapNode>();

        // Initially add only first column of elements. First
        // element of every array
        for (int i = 0; i < arr.length; i++) {
            heap.add(new HeapNode(i, 0, arr[i][0]));
        }

        HeapNode curr = null;
        while (!heap.isEmpty()) {
            curr = heap.poll();
            result.add(curr.value);

            // Check if next element of curr min exists,
            // then add that to heap.
            if (curr.y < (arr[curr.x].length - 1)) {
                heap.add(new HeapNode(curr.x, curr.y + 1,arr[curr.x][curr.y + 1]));
            }
        }

        return result;
    }

    public static void main(String[] args)
    {

        int[][] arr = { { 2, 6, 12 },
                        { 1, 9 },
                        { 23, 34, 90, 2000 } };
        System.out.println(KWayMerge.mergeKArrays(arr, arr.length).toString());
    }
}
-----------------------------------------------------------------
