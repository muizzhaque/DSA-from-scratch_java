-----------------------------------------------------------------
// Java program to demonstrate working
// of java.lang.Integer.bitCount() method

import java.lang.Integer;

class Gfg {
	// driver code
	public static void main(String args[])
	{
		int a = 10;

		// Convert integer number to binary format
		System.out.println(Integer.toBinaryString(a));

		// to print number of 1's in the number a
		System.out.println(Integer.bitCount(a));
	}
}
ans = 1010, 2
-----------------------------------------------------------------
public class FindUnique {
    public static void main(String[] args) {
        int[] arr = {2, 3, 3, 4, 2, 6, 4};
        System.out.println(ans(arr));
    }

    private static int ans(int[] arr) {
        int unique = 0;

        for(int n : arr) {
            unique ^= n;
        }

        return unique;
    }
}
-----------------------------------------------------------------
// https://leetcode.com/problems/flipping-an-image /important
// google question
class FlipImage {
    public int[][] flipAndInvertImage(int[][] image) {
        for(int[] row : image) {
            // reverse this array
            for (int i = 0; i < (image[0].length + 1) / 2; i++) {
                // swap
                int temp = row[i] ^ 1;
                row[i] = row[image[0].length - i - 1] ^ 1;
                row[image[0].length - i - 1] = temp;
            }
        }
        return image;
    }
}
-----------------------------------------------------------------
public class MagicNumber { // important
    public static void main(String[] args) {
        int n = 5;

        int ans = 0;
        int base = 5;

        while (n > 0) {
            int last = n & 1;
            n = n >> 1;
            ans += last * base;
            base = base * 5;
        }

        System.out.println(ans);
    }
} 
-----------------------------------------------------------------
public class NoOfDigits { // important
    public static void main(String[] args) {
        int n = 10;
        int b = 2;

        int ans = (int)(Math.log(n) / Math.log(b)) + 1;

        System.out.println(ans);
    }
}
-----------------------------------------------------------------
public class OddEven {

    public static void main(String[] args) {
	    int n = 68;
        System.out.println(isOdd(n));
    }

    private static boolean isOdd(int n) {
        return (n & 1) == 1;
    }
}
-----------------------------------------------------------------
public class PowOfTwo {
    public static void main(String[] args) {
        int n = 31; // note: fix for n = 0
        boolean ans = (n & (n-1)) == 0;
        System.out.println(ans);
    }
}
-----------------------------------------------------------------
public class Power {
    public static void main(String[] args) {
        int base = 2;
        int power = 4;

        int ans = 1;

        while (power > 0) {
            if ((power & 1) == 1) {
                ans *= base;
            }

            base *= base;
            power = power >> 1;
        }

        System.out.println(ans);
    }
}
-----------------------------------------------------------------
public class RangeXOR { // important
    public static void main(String[] args) {
        // range xor for a, b = xor(b) ^ xor(a-1)
        int a = 3;
        int b = 9;

        int ans = xor(b) ^ xor(a-1);

        System.out.println(ans);

        // only for check, will give TLE for large numbers
        int ans2 = 0;
        for (int i = a; i <= b; i++) {
            ans2 ^= i;
        }

        System.out.println(ans2);
    }

    // this gives xor from 0 to a
    static int xor(int a) {
        if (a % 4 == 0) {
            return a;
        }

        if (a % 4 == 1) {
            return 1;
        }

        if (a % 4 == 2) {
            return a + 1;
        }

        return 0;
    }

}
-----------------------------------------------------------------
public class SetBits {
    public static void main(String[] args) {
        int n = 234567;
        System.out.println(Integer.toBinaryString(n));

        System.out.println(setBits(n));
    }

    private static int setBits(int n) {
        int count = 0;

//        while (n > 0) {
//            count++;
//            n -= (n & -n);
//        }

        while (n > 0) {
            count++;
            n = n & (n-1);
        }

        return count;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/add-binary/
public String addBinary(String a, String b) 
  {
    StringBuilder sb = new StringBuilder();
    int carry = 0;
    int i = a.length() - 1;
    int j = b.length() - 1;

    while (i >= 0 || j >= 0 || carry == 1) 
    {
      if(i >= 0)
        carry += a.charAt(i--) - '0';
      if(j >= 0)
        carry += b.charAt(j--) - '0';
      sb.append(carry % 2);
      carry /= 2;
    }
    return sb.reverse().toString();
  }
-----------------------------------------------------------------
https://leetcode.com/problems/reverse-bits/
public class Solution { // important
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            ans <<= 1;
            ans |= (n & 1);
            n >>= 1;
        }
        return ans;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/number-of-1-bits/
class Solution {
    public int hammingWeight(int n) {
        int count = 0;
        while(n>0){
            int rem = n%2;
            if(rem == 1){
                count++;
            }
            n/=2;
        }
        return count;
    }
    or 
    public int hammingWeight(int n) {
        int count = 0;
        while(n!=0){
            count+=(n&1)
            n>>=1;
        }
        return count;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/counting-bits/
class Solution {
    public int[] countBits(int n) {
        int[] ans = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            ans[i] = ans[i >> 1] + (i & 1);
        }
        return ans;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/number-complement/
class Solution {
    public int findComplement(int num) {
        int result = 0;
        int set = 1;
        while(num != 0) {
            if((num&1)== 0) {
                result |= set;
            }
            set <<= 1;
            num >>= 1;
        }
        return result;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-number-with-alternating-bits/
class Solution {
    public boolean hasAlternatingBits(int n) 
    {
        int prevBit = n % 2;

        n /= 2;

        while (n > 0)
        {
            if (n % 2 == prevBit) return false;
            else prevBit = n % 2;

            n /= 2;
        }

        return true;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/
class Solution {
    public int numberOfSteps(int num) 
    {
        int c=0;
        while(num!=0)
        {
           if ((num & 1) == 1) 
           { 
                num -= 1;
            } 
            else
             {
                num >>= 1;
            }
            c++;
        }
        return c;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/decode-xored-array/submissions/
class Solution {
    public int[] decode(int[] encoded, int first) {
        int n=encoded.length;
        int ans[]= new int[n+1];
        ans[0]=first;
        for(int i=0;i<n;i++){
            ans[i+1]=ans[i]^encoded[i];
        }
        return ans;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/sum-of-all-subset-xor-totals/ //important
class Solution {
    public int subsetXORSum(int[] nums) {
    int n=nums.length;
    int ogans=0;
    for(int i=0;i<(1<<n);i++){
        int sum=0;
        for(int j=0;j<n;j++){
            int bit=i&(1<<j);
            if (bit!=0){
                sum=sum^nums[j];
            }    
        }
        ogans+=sum;
    }
    return ogans;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/  // important
class Solution {
    public int countPrimeSetBits(int left, int right) {
          int count = 0;
        for (int i = left; i <= right; i++) {
            int setBits = Integer.bitCount(i);
            if (isPrime(setBits)) {
                count++;
            }
        }
        return count;
    }

    public boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
(or)
class Solution {
    public int countPrimeSetBits(int left, int right) {
          int count = 0;
        for (int i = left; i <= right; i++) {
            int setBits = setBits(i);
            if (isPrime(setBits)) {
                count++;
            }
        }
        return count;
    }
    public int setBits(int n) {
        int count = 0;

//        while (n > 0) {
//            count++;
//            n -= (n & -n);
//        }
        while (n > 0) {
            count++;
            n = n & (n-1);
        }
        return count;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/ 
class Solution {
    public int[] sortByBits(int[] arr) {
        int[][] count = new int[arr.length][2];
        for(int i = 0; i < arr.length; i++){
            count[i] = new int[]{arr[i], setBits(arr[i])};
        }
        Arrays.sort(count, (a, b) -> a[1] == b[1] ? a[0] - b[0] : a[1] - b[1]);
        for(int i = 0; i < arr.length; i++){
            arr[i] = count[i][0];
        }
        return arr;
    }

    public int setBits(int n){
        int count = 0;
        while(n>0){
            count++;
            n = n & (n-1);
        }
        return count;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/count-the-number-of-consistent-strings/
class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int count = words.length;
        int bitset = 0;
        for (char c : allowed.toCharArray()) {
            bitset |= 1 << c - 'a';
        }

        for (String word : words) {
            for (char c : word.toCharArray()) {
                if ((bitset & (1 << c - 'a')) == 0) {
                    count--;
                    break;
                }
            }
        }
        return count;        
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/gray-code/
class Solution {
    public List<Integer> grayCode(int n) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0;i<(1<<n);i++){
         list.add(i^(i>>1));
       }
         return list;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/ /important as it uses associative law
class Solution {
    //do xor
    //(a & b) ^ (a & c) => a & (b ^ c) associative law
    public int getXORSum(int[] arr1, int[] arr2) {
        int res1=0;
        for(int i=0;i<arr1.length;i++)
        {
           res1= res1 ^ arr1[i];
        }
        int res2=0;
        for(int i=0;i<arr2.length;i++)
        {
            res2 = res2 ^ arr2[i];
        }
        return res1 & res2;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/subsets/ important
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        List<List<Integer>> res = new ArrayList<>();

        for (int i = 0; i < Math.pow(2, n); i++) {
            List<Integer> temp = new ArrayList<>();

            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    temp.add(nums[j]);
                }
            }

            res.add(temp);
        }

        return res;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/subsets-ii/ /important, try it on the console
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        HashSet<List<Integer>> hs = new HashSet();
        for (int i = 0; i < 1<<nums.length; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    temp.add(nums[j]);
                }
            }
            hs.add(temp);
        }
        return new ArrayList(hs);
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/single-number-ii/
public class ThreeXOR {
    public static void main(String[] args) {
        int[] nums = {2,3,2,2,5,5,6,6,5,6};
        int ans = singleNumber(nums);
        System.out.println(ans);
    }
    static int singleNumber(int[] nums) {
        int ones = 0; //Stores whatever appears once
        int twos = 0; //Stores whatever appears twice
        for (int n : nums) {
            //Add it to ones if it is not in twos
            ones = (n ^ ones) & (~twos);
            //Add it twos if it is in ones, delete from ones
            twos = (n ^ twos) & (~ones);
        }
        return ones; //The single number should be left in ones
    }
}

-----------------------------------------------------------------
https://leetcode.com/problems/divide-two-integers/ /important
https://www.youtube.com/watch?v=pBD4B1tzgVc
class Solution {
    public int divide(int dividend, int divisor) {
        // Handling edge case where dividend is Integer.MIN_VALUE and divisor is -1
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }

        // Checking if the result will be negative
        boolean isNegative = (dividend < 0) ^ (divisor < 0);

        // Converting dividend and divisor to long and taking their absolute values
        long dvd = Math.abs((long) dividend);
        long dvs = Math.abs((long) divisor);

        // Initializing result to store the quotient
        int result = 0;

        // Performing division without using multiplication, division, and mod operator
        while (dvd >= dvs) {
            long temp = dvs, multiple = 1;

            // Finding the largest multiple of divisor that can be subtracted from dividend without making it negative
            while (dvd >= (temp << 1)) {
                temp <<= 1;      // Doubling the value of temp
                multiple <<= 1;  // Doubling the value of multiple to keep track of how many times temp was doubled
            }

            dvd -= temp;     // Subtracting the largest multiple from dividend
            result += multiple;  // Adding the corresponding multiple to the result quotient
        }

        return isNegative ? -result : result;  // Returning the final quotient with appropriate sign
    }
}
-----------------------------------------------------------------
