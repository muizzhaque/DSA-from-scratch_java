-----------------------------------------------------------------
import java.util.*;

public class InBuiltExamples {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(34);
        stack.push(45);
        stack.push(2);
        stack.push(9);
        stack.push(18);

        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());

        Queue<Integer> queue = new LinkedList<>();
        queue.add(3);
        queue.add(6);
        queue.add(5);
        queue.add(19);
        queue.add(1);

        System.out.println(queue.remove());
        System.out.println(queue.remove());

        Deque<Integer> deque = new ArrayDeque<>();
        deque.add(89);
        deque.addLast(78);
        deque.removeFirst();
        // etc etc

        class RecentCounter {
            Queue<Integer> q;
            int count = 0;
            public RecentCounter() {
                q= new LinkedList<>();
            }
    
            public int ping(int t) {
                q.add(t);
                while(q.peek()<t-3000){
                    q.poll();
                }
                return q.size();
            }
        }
    }
}
-----------------------------------------------------------------
public class CustomStack {
    protected int[] data;
    private static final int DEFAULT_SIZE = 10;

    int ptr = -1;

    public CustomStack(){
        this(DEFAULT_SIZE);
    }

    public CustomStack(int size) {
        this.data = new int[size];
    }

    public boolean push(int item) {
        if (isFull()) {
            System.out.println("Stack is full!!");
            return false;
        }
        ptr++;
        data[ptr] = item;
        return true;
    }

    public int pop() throws StackException {
        if (isEmpty()) {
            throw new StackException("Cannot pop from an empty stack!!");
        }
//        int removed = data[ptr];
//        ptr--;
//        return removed;
        return data[ptr--];
    }

    public int peek() throws StackException {
        if (isEmpty()) {
            throw new StackException("Cannot peek from an empty stack!!");
        }
        return data[ptr];
    }

    public boolean isFull() {
        return ptr == data.length - 1; // ptr is at last index
    }

    public boolean isEmpty() {
        return ptr == -1;
    }
}
-----------------------------------------------------------------
public class StackException extends Exception{

    public StackException(String message) {
        super(message);
    }
}
-----------------------------------------------------------------
public class StackMain {
    public static void main(String[] args) throws StackException {
        CustomStack stack = new DynamicStack(5);

        stack.push(34);
        stack.push(45);
        stack.push(2);
        stack.push(9);
        stack.push(18);
        stack.push(89);


        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
    }
}
-----------------------------------------------------------------
public class DynamicStack extends CustomStack{

    public DynamicStack() {
        super(); // it will call CustomStack()
    }

    public DynamicStack(int size) {
        super(size); // it will call CustomStack(int size)
    }

    @Override
    public boolean push(int item) {
        // this takes care of it being full
        if (this.isFull()) {
            // double the array size
            int[] temp = new int[data.length * 2];

            // copy all previous items in new data
            for (int i = 0; i < data.length; i++) {
                temp[i] = data[i];
            }

            data = temp;
        }

        // at this point we know that array is not full
        // insert item
        return super.push(item);
    }
}
-----------------------------------------------------------------
public class CustomQueue {
    private int[] data;

    private static final int DEFAULT_SIZE = 10;

    int end = 0;

    public CustomQueue(){
        this(DEFAULT_SIZE);
    }

    public CustomQueue(int size) {
        this.data = new int[size];
    }

    public boolean isFull() {
        return end == data.length; // ptr is at last index
    }

    public boolean isEmpty() {
        return end == 0;
    }

    public boolean insert(int item) {
        if (isFull()) {
            return false;
        }
        data[end++] = item;
        return true;
    }

    public int remove() throws Exception {
        if (isEmpty()) {
            throw new Exception("Queue is empty");
        }

        int removed = data[0];

        // shift the elements to left
        for (int i = 1; i < end; i++) {
            data[i-1] = data[i];
        }
        end--;
        return removed;
    }

    public int front() throws Exception{
        if (isEmpty()) {
            throw new Exception("Queue is empty");
        }
        return data[0];
    }

    public void display() {
        for (int i = 0; i < end; i++) {
            System.out.print(data[i] + " <- ");
        }
        System.out.println("END");
    }

}
-----------------------------------------------------------------
public class CircularQueue {
    protected int[] data;
    private static final int DEFAULT_SIZE = 10;

    protected int end = 0;
    protected int front = 0;
    private int size = 0;

    public CircularQueue(){
        this(DEFAULT_SIZE);
    }

    public CircularQueue(int size) {
        this.data = new int[size];
    }

    public boolean isFull() {
        return size == data.length; // ptr is at last index
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean insert(int item) {
        if (isFull()) {
            return false;
        }
        data[end++] = item;
        end = end % data.length;
        size++;
        return true;
    }

    public int remove() throws Exception {
        if (isEmpty()) {
            throw new Exception("Queue is empty");
        }

        int removed = data[front++];
        front = front % data.length;
        size--;
        return removed;
    }

    public int front() throws Exception{
        if (isEmpty()) {
            throw new Exception("Queue is empty");
        }
        return data[front];
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Empty");
            return;
        }
        int i = front;
        do {
            System.out.print(data[i] + " -> ");
            i++;
            i %= data.length;
        } while (i != end);
        System.out.println("END");
    }

}
-----------------------------------------------------------------
public class DynamicQueue extends CircularQueue{
    public DynamicQueue() {
        super();
    }

    public DynamicQueue(int size) {
        super(size);
    }

    @Override
    public boolean insert(int item) {

        // this takes care of it being full
        if (this.isFull()) {
            // double the array size
            int[] temp = new int[data.length * 2];

            // copy all previous items in new data
            for (int i = 0; i < data.length; i++) {
                temp[i] = data[(front + i) % data.length];
            }
            front = 0;
            end = data.length;
            data = temp;
        }

        // at this point we know that array is not full
        // insert item
        return super.insert(item);
    }
}
-----------------------------------------------------------------
public class QueueMain {
    public static void main(String[] args) throws Exception {
        CircularQueue queue = new CircularQueue(5);
        queue.insert(3);
        queue.insert(6);
        queue.insert(5);
        queue.insert(19);
        queue.insert(1);

        queue.display();

        System.out.println(queue.remove());
        queue.insert(133);
        queue.display();

        System.out.println(queue.remove());
        queue.insert(99);
        queue.display();

    }
}
-----------------------------------------------------------------
public class QueueUsingStack {
  private Stack<Integer> first;
  private Stack<Integer> second;

  public QueueUsingStack() {
    first = new Stack<>();
    second = new Stack<>();
  }

  public void add(int item) {
    first.push(item);
  }

  public int remove() throws Exception {
    while (!first.isEmpty()) {
      second.push(first.pop());
    }
    int removed = second.pop();
    while (!second.isEmpty()) {
      first.push(second.pop());
    }
    return removed;
  }

  public int peek() throws Exception {
    while (!first.isEmpty()) {
      second.push(first.pop());
    }

    int peeked = second.peek();

    while (!second.isEmpty()) {
      first.push(second.pop());
    }
    return peeked;
  }

  public boolean isEmpty() {
    return first.isEmpty();
  }
}
-----------------------------------------------------------------
public class QueueUsingStackRemove {
  private Stack<Integer> first;
  private Stack<Integer> second;

  public QueueUsingStackRemove() {
    first = new Stack<>();
    second = new Stack<>();
  }

  public void add(int item) throws Exception {
    while (!first.isEmpty()) {
      second.push(first.pop());
    }
    first.push(item);
    while (!second.isEmpty()) {
      first.push(second.pop());
    }
  }

  public int remove() throws Exception {
    return first.pop();
  }

  public int peek() throws Exception {
    return first.peek();
  }

  public boolean isEmpty() {
    return first.isEmpty();
  }

}
-----------------------------------------------------------------
import java.util.*;

class TwoStacks {
  static int twoStacks(int x, int[] a, int[] b) {
    return twoStacks(x, a, b, 0, 0) - 1;
  }

  private static int twoStacks(int x, int[] a, int[] b, int sum, int count) {
    if (sum > x) {
      return count;
    }

    if (a.length == 0 || b.length == 0) {
      return count;
    }

    int ans1 = twoStacks(x, Arrays.copyOfRange(a, 1, a.length), b, sum + a[0], count + 1);
    int ans2 = twoStacks(x, a, Arrays.copyOfRange(b, 1, b.length), sum + a[0], count + 1);

    return Math.max(ans1, ans2);
  }

  public static void main(String[] args) {
    Scanner s = new Scanner(System.in);
    int t = s.nextInt();
    for (int i = 0; i < t; i++) {
      int n = s.nextInt();
      int m = s.nextInt();
      int x = s.nextInt();
      int[] a = new int[n];
      int[] b = new int[m];
      for (int j = 0; j < n; j++) {
        a[j] = s.nextInt();
      }
      for (int j = 0; j < m; j++) {
        b[j] = s.nextInt();
      }
      System.out.println(twoStacks(x, a, b));
    }
  }

}
-----------------------------------------------------------------
https://leetcode.com/problems/valid-parentheses/
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char c: s.toCharArray()){
            if(c == '(' || c == '{' || c == '['){
                stack.push(c);
            }
            else {
                if (c == ')') {
                    if (stack.isEmpty() || stack.pop() != '(') {
                        return false;
                    }
                }
                if (c == '}') {
                    if (stack.isEmpty() || stack.pop() != '{') {
                        return false;
                    }
                }
                if (c == ']') {
                    if (stack.isEmpty() || stack.pop() != '[') {
                        return false;
                    }
                }
            }
        }
        return stack.isEmpty();
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/remove-outermost-parentheses/
class Solution {
    public String removeOuterParentheses(String s) {
        StringBuilder sb = new StringBuilder();
        Stack<Character> st = new Stack<>();
        for(char c : s.toCharArray()){
            if(st.isEmpty() && c == '('){
                st.push('(');
            }
            else if(!st.isEmpty() && c == '('){
                st.push(c);
                sb.append(c);
            }
            else if(st.size() >1 && c == ')'){
                st.pop();
                sb.append(c);
            }
            else if(st.size() == 1 && c == ')'){
                st.pop();
            }
        }
        return sb.toString();
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/min-stack/
class MinStack {
    int min = Integer.MAX_VALUE;
    Stack<Integer> stack;
    public MinStack() {
        stack = new Stack<>();
    }
    
    public void push(int val) {
        if(val<=min){
            stack.push(min);
            min = val;
        }
        stack.push(val);
    }
    
    public void pop() {
        if(stack.pop() == min) min=stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
-----------------------------------------------------------------
https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
class Solution {
    public String removeDuplicates(String s) {
        Stack<Character> stack = new Stack<>();
        for(char ch : s.toCharArray()){
            if (!stack.isEmpty()){
                if(ch == stack.peek()){
                    stack.pop();
                }
                else{
                    stack.push(ch);
                }
            }else{
                stack.push(ch);
            }
        }
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        return sb.reverse().toString();
    }
}
or 
class Solution {
    public String removeDuplicates(String s) {
        StringBuilder stack = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (stack.isEmpty())
                stack.append(c);
            else if (stack.charAt(stack.length() - 1) == c) {
                stack.deleteCharAt(stack.length() - 1);
            }
            else {
                stack.append(c);
            }
        }

        return stack.toString();
    }
}
additionally
String original = "Hello, World!";
        char[] charArray = original.toCharArray();
        for (int i = 0, j = charArray.length - 1; i < j; i++, j--) {
            char temp = charArray[i];
            charArray[i] = charArray[j];
            charArray[j] = temp;
        }
        String reversed = new String(charArray);
-----------------------------------------------------------------
https://www.geeksforgeeks.org/problems/inorder-traversal-iterative/1
class Solution
{
    // Return a list containing the inorder traversal of the given tree
    ArrayList<Integer> inOrder(Node root)
    {
        // Code
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        Stack<Node> stack = new Stack<>();
        Node current = root;

        // Iterate until both stack is empty and current is null
        while (!stack.isEmpty() || current != null) {
            // Push all left nodes onto the stack
            while (current != null) {
                stack.push(current);
                current = current.left;
            }

            // Pop the top node from the stack and add its value to the result list
            current = stack.pop();
            result.add(current.data);

            // Move to the right subtree
            current = current.right;
        }
        return result;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/next-greater-element-i/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];
        Stack<Integer> stack = new Stack<Integer>();
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int n: nums2){
            while(!stack.isEmpty() && n > stack.peek()){
                map.put(stack.pop(), n);
            }
            stack.push(n);
        }
        int i = 0;
        for(int n : nums1){
            ans[i++] = map.getOrDefault(n, -1);
        }
        return ans;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/design-a-stack-with-increment-operation/
// class CustomStack {

//     public CustomStack(int maxSize) {
        
//     }
    
//     public void push(int x) {
        
//     }
    
//     public int pop() {
        
//     }
    
//     public void increment(int k, int val) {
        
//     }
// }

// /**
//  * Your CustomStack object will be instantiated and called as such:
//  * CustomStack obj = new CustomStack(maxSize);
//  * obj.push(x);
//  * int param_2 = obj.pop();
//  * obj.increment(k,val);
//  */

import java.util.Stack;

class CustomStack {
    private Stack<Integer> stack;
    private int[] increment;
    private int maxSize;

    public CustomStack(int maxSize) {
        this.stack = new Stack<>();
        this.increment = new int[maxSize];
        this.maxSize = maxSize;
    }

    public void push(int x) {
        if (stack.size() < maxSize) {
            stack.push(x);
        }
    }

    public int pop() {
        int idx = stack.size() - 1;
        if (idx < 0) {
            return -1;
        }
        if (idx > 0) {
            increment[idx - 1] += increment[idx];
        }
        int result = stack.pop() + increment[idx];
        increment[idx] = 0;  // reset the increment for the popped element
        return result;
    }

    public void increment(int k, int val) {
        int limit = Math.min(k, stack.size());
        if (limit > 0) {
            increment[limit - 1] += val;
        }
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/asteroid-collision/
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack = new Stack<>();
        for (int asteroid : asteroids) {
            boolean alive = true;
            while (!stack.isEmpty() && asteroid < 0 && stack.peek() > 0) {
                if (stack.peek() < -asteroid) {
                    stack.pop();
                    continue;
                } else if (stack.peek() == -asteroid) {
                    stack.pop();
                }
                alive = false;
                break;
            }
            if (alive) {
                stack.push(asteroid);
            }
        }
        int[] result = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; --i) {
            result[i] = stack.pop();
        }
        return result;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/132-pattern/ imp
public class Solution {
    public boolean find132pattern(int[] nums) {
        int length = nums.length;
        // Check if the array has less than 3 elements
        if (length < 3)
            return false;
        // Stack to keep track of decreasing elements.
        Deque<Integer> decreasingStack = new ArrayDeque<>(length);
        // Maximum value of the third element in the 132 pattern.
        int maxThirdElement = Integer.MIN_VALUE;
        // Traverse the array from right to left
        for (int i = length - 1; i >= 0; i--) {
            int currentNumber = nums[i];
            // Check for 132 pattern
            if (currentNumber < maxThirdElement)
                return true;  // Found a 132 pattern.
            // Maintain the stack with decreasing elements
            while (!decreasingStack.isEmpty() && decreasingStack.peek() < currentNumber) {
                maxThirdElement = decreasingStack.pop();
            }
            // Push the current element onto the stack.
            decreasingStack.push(currentNumber);
        }
        return false; // No 132 pattern found
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/find-the-most-competitive-subsequence/
class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        Deque<Integer> deque = new ArrayDeque<>();
        for (int i = 0; i < nums.length; i++) {
            while (deque.size() > 0 && nums[i] < deque.peekLast() && nums.length - i + deque.size() > k) {
                deque.pollLast();
            }
            if (deque.size() < k) {
                deque.offerLast(nums[i]);
            }
        }
        int[] res = new int[k];
        int i = 0;
        while (!deque.isEmpty()) {
            res[i++] = deque.pollFirst();
        }
        return res;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/decode-string/
class Solution {
    public String decodeString(String s) {
        Stack<Character> stack = new Stack<>();
        
        for(char c : s.toCharArray())
        {
            if(c != ']') 
                stack.push(c); //push everything but ]
            
            else 
            {
                //step 1: 
                    //if you find a closing ] then 
                   //retrieve the string it encapsulates
                
                StringBuilder sb = new StringBuilder();
                while(!stack.isEmpty() && Character.isLetter(stack.peek()))
                    sb.insert(0, stack.pop());
                
                String sub = sb.toString(); //this is the string contained in [ ]
                stack.pop(); //Discard the '[';
                
                
                //step 2: 
                    //after that get the number of
                  // times it should repeat from stack
                    
                sb = new StringBuilder();
                while(!stack.isEmpty() && Character.isDigit(stack.peek()))
                    sb.insert(0, stack.pop());
                    
                int count = Integer.valueOf(sb.toString()); //this is the number
                
                
                //step 3: 
                    //repeat the string within the [ ] count 
                  //number of times and push it back into stack
                
                while(count > 0)
                {
                    for(char ch : sub.toCharArray())  
                        stack.push(ch);
                    count--;
                }
            }
        }
        
      //final fetching and returning the value in stack 
        StringBuilder retv = new StringBuilder();
        while(!stack.isEmpty())
            retv.insert(0, stack.pop());

        return retv.toString();
    }
}
-----------------------------------------------------------------
https://www.geeksforgeeks.org/problems/stock-span-problem-1587115621/1
class Solution {
    public static int[] calculateSpan(int price[], int n) {
        // Your code here
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        int[] ans = new int[price.length];
        ans[0] = 1;
        for(int i = 1; i<price.length; i++){
            while (!stack.isEmpty() && price[stack.peek()] <= price[i]) {
                stack.pop();
            }
            ans[i] = (stack.isEmpty()) ? (i + 1) : (i - stack.peek());
            stack.push(i);
        }
        return ans;
    } 
}
-----------------------------------------------------------------
https://www.geeksforgeeks.org/problems/max-rectangle/1
class Solution {
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        if (n == 0 || m == 0) return 0;
        int maxArea = 0;
        int[] heights = new int[m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // Update the heights array
                if (M[i][j] == 1) {
                    heights[j]++;
                } else {
                    heights[j] = 0;
                }
            }
            // Calculate the maximum area for the current histogram
            maxArea = Math.max(maxArea, largestRectangleArea(heights));
        }
        return maxArea;
    }
    private int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int index = 0;

        while (index < heights.length) {
            if (stack.isEmpty() || heights[index] >= heights[stack.peek()]) {
                stack.push(index++);
            } else {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? index : index - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
        }

        while (!stack.isEmpty()) {
            int height = heights[stack.pop()];
            int width = stack.isEmpty() ? heights.length : heights.length - stack.peek() - 1;
            maxArea = Math.max(maxArea, height * width);
        }

        return maxArea;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/binary-tree-right-side-view/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        // offer -> Adds the specified element as the tail (last element) of this list.
        List<Integer> nm=new ArrayList<>();
        Queue<TreeNode> kk=new LinkedList<>();
        if(root==null)
            return nm;
        kk.offer(root);
        while(!kk.isEmpty())
        {
            int k=kk.size();
            for(int i=1;i<=k;i++)
            {                
                if(kk.peek().left!=null)
                    kk.offer(kk.peek().left);
                if(kk.peek().right!=null)
                    kk.offer(kk.peek().right);
                if(i==k)
                {
                    nm.add(kk.poll().val);
                    break;
                }
                kk.poll();
            }
        }
        return nm;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/largest-rectangle-in-histogram/
class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int max = 0;

        stack.push(0);

        for (int i = 1; i < heights.length; i++) {
        while (!stack.isEmpty() && heights[i] < heights[stack.peek()]) {
            max = getMax(heights, stack, max, i);
        }
        stack.push(i);
        }

        int i = heights.length;
        while (!stack.isEmpty()) {
        max = getMax(heights, stack, max, i);
        }

        return max;
    }
    private int getMax(int[] arr, Stack<Integer> stack, int max, int i) {
        int area;
        int popped = stack.pop();
        if (stack.isEmpty()) {
        area = arr[popped] * i;
        } else {
        area = arr[popped] * (i - 1 - stack.peek());
        }
        return Math.max(max, area);
    }
}
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
