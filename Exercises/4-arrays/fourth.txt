public class ArraysDef {
    public static void main(String[] args) {
        // Q: store a roll number
        int a = 19;

        // Q: store a person's name
        String name = "Muizz Ul Haque";

        // Q: store 5 roll numbers
        int rno1 = 23;
        int rno2 = 55;
        int rno3 = 18;

        // syntax
        // datatype[] variable_name = new datatype[size];
        // store 5 roll numbers:
//        int[] rnos = new int[5];
//        // or directly
//        int[] rnos2 = {23, 12, 45, 32, 15};

        int[] ros; // declaration of array. ros is getting defined in the stack
        ros = new int[5]; // initialisation: actually here object is being created in the memory (heap)

//        System.out.println(ros[1]);

        String[] arr = new String[4];
        System.out.println(arr[0]);

//        for (String element : arr) {
//            System.out.println(element);
//        }

    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/design-front-middle-back-queue/
class FrontMiddleBackQueue {
    private List<Integer> list;

    public FrontMiddleBackQueue() {
        list = new ArrayList<>();
    }

    public void pushFront(int val) {
        list.add(0, val);
    }

    public void pushMiddle(int val) {
        int mid = list.size() / 2;
        list.add(mid, val);
    }

    public void pushBack(int val) {
        list.add(val);
    }

    public int popFront() {
        if (list.isEmpty()) return -1;
        return list.remove(0);
    }

    public int popMiddle() {
        if (list.isEmpty()) return -1;
        int mid = (list.size() - 1) / 2;
        return list.remove(mid);
    }

    public int popBack() {
        if (list.isEmpty()) return -1;
        return list.remove(list.size() - 1);
    }
}
-----------------------------------------------------------------
//  lucky-numbers-in-a-matrix
//  https://leetcode.com/problems/lucky-numbers-in-a-matrix/
class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        ArrayList<Integer> list = new ArrayList<>();
        for( int i = 0; i < matrix.length; i++){
            int min = Integer.MAX_VALUE;
            int col = 0;
            for( int j = 0; j < matrix[i].length; j++){
                if(matrix[i][j]<min){
                    min = matrix[i][j];
                    col = j;
                }
            }
            boolean ans = true;
            for( int j = 0; j < matrix.length; j++){
                if(matrix[j][col]>min){
                    ans = false;
                }
            }
            if(ans){
                list.add(min);
            }
        }
        return list;
    }
}
-----------------------------------------------------------------
//  maximum-subarray
//  https://leetcode.com/problems/maximum-subarray/
class Solution {
    public int maxSubArray(int[] nums) {
      int maxSum = nums[0];
        int currentSum = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }

        return maxSum;  
    }
}
-----------------------------------------------------------------
//  maximum-population-year
//  https://leetcode.com/problems/maximum-population-year/
class Solution {
    public int maximumPopulation(int[][] logs) {
        
        int [] arr = new int[101];
        
        for(int[] l: logs){
            arr[l[0]-1950] += 1;
            arr[l[1]-1950] -= 1;
        }
        
        int max = 0;
        int year = 0;
        int sum = 0;
        for(int j=0; j<arr.length; j++){
            sum = sum + arr[j];
            if(sum>max){
                max = sum;
                year = 1950+j;
            }
        }
        return year;
    }
}
-----------------------------------------------------------------
//  add-to-array-form-of-Integer
//  https://leetcode.com/problems/add-to-array-form-of-integer/
    class Solution {
        public List<Integer> addToArrayForm(int[] num, int k){
        List<Integer> num1 = new ArrayList<>();
        int i=num.length-1;
    
        while(i>=0 || k>0){
            if(i>=0){
                num1.add((num[i]+k)%10);
                k=(num[i]+k)/10;
                i--;
            }
            else{
                num1.add(k%10);
                k=k/10;
            }
        }    
        Collections.reverse(num1);
        return num1;
        }
    }
-----------------------------------------------------------------
import java.util.Arrays;
import java.util.Scanner;

public class InputJava {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        // array of primitives
        int[] arr = new int[5];
        arr[0] = 23;
        arr[1] = 45;
        arr[2] = 233;
        arr[3] = 543;
        arr[4] = 3;
        // [23, 45, 233, 543, 3]
        System.out.println(arr[3]);

        // input using for loops
        for (int i = 0; i < arr.length; i++) {
            arr[i] = in.nextInt();
        }
//
//        System.out.println(Arrays.toString(arr));

//        for (int i = 0; i < arr.length; i++) {
//            System.out.print(arr[i] + " ");
//        }

//        for(int num : arr) { // for every element in array, print the element
//            System.out.print(num + " "); //  here num represents element of the array
//        }

//        System.out.println(arr[5]); // index out of bound error

        // array of objects
        String[] str = new String[4];
        for (int i = 0; i < str.length; i++) {
            str[i] = in.next();
        }

        System.out.println(Arrays.toString(str));

        // modify
        str[1] = "muizz";

        System.out.println(Arrays.toString(str));
    }
}
-----------------------------------------------------------------
import java.util.Arrays;
import java.util.Scanner;

public class MultiDimension {
    public static void main(String[] args) {
        /*
            1 2 3
            4 5 6
            7 8 9
        */
        Scanner in = new Scanner(System.in);
//        int[][] arr = new int[3][];

//        int[][] arr = {
//                {1, 2, 3}, // 0th index
//                {4, 5}, // 1st index
//                {6, 7, 8, 9} // 2nd index -> arr[2] = {6, 7, 8, 9}
//        };

        int[][] arr = new int[3][3];
        System.out.println(arr.length); // no of rows
        // input

        for (int row = 0; row < arr.length; row++) {
            // for each col in every row
            for (int col = 0; col < arr[row].length; col++) {
                arr[row][col] = in.nextInt();
            }
        }

        // output
//        for (int row = 0; row < arr.length; row++) {
//            // for each col in every row
//            for (int col = 0; col < arr[row].length; col++) {
//                System.out.print(arr[row][col] + " ");
//            }
//            System.out.println();
//        }

        // output
//        for (int row = 0; row < arr.length; row++) {
//            System.out.println(Arrays.toString(arr[row]));
//        }

        // for(int[] a : arr) {
        //     System.out.println(Arrays.toString(a));
        // }

            int[][] arr1 = {
                    {1, 2, 3, 4},
                    {5, 6},
                    {7, 8, 9}
            };
    
            for (int row = 0; row < arr.length; row++) {
                for (int col = 0; col < arr1[row].length; col++) {
                    System.out.print(arr1[row][col] + " ");
                }
                System.out.println();
            }
        }
    }
-----------------------------------------------------------------
find the transpose of a matrix
    public int[][] transpose(int[][] matrix) {
        int m = matrix.length;
         int n = matrix[0].length;
         int[][] ans = new int[n][m];
         for (int i = 0; i < m; i++){
             for(int j = 0; j < n; j++){
                 ans[j][i] = matrix[i][j];
            }
         }
         return ans;
     }
-----------------------------------------------------------------
//  Two Sum
//  https://leetcode.com/problems/two-sum/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=1;i<nums.length;i++){
            for(int j=i;j<nums.length;j++){
                if(nums[j-i]+nums[j]==target){
                    return new int[]{j-i,j};
                }
            }
        }
        return new int[]{};
    }
}
-----------------------------------------------------------------
// minimum-cost-to-move-chips-to-the-same-position
//  https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position/
class Solution {
    public int minCostToMoveChips(int[] position) {
        int countOdd = 0;
        int countEven = 0;

        for (int i = 0; i < position.length; i++) {
            if (position[i] % 2 == 0) {
                countEven++;
            } else {
                countOdd++;
            }
        }

        return Math.min(countEven, countOdd);
    }
}
-----------------------------------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class ArrayListExample {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // Syntax
        ArrayList<Integer> list = new ArrayList<>(5); // here () is a constructor
// even if you specify the size of the array you can add as many elements as you want.
//        list.add(67);
//        list.add(234);
//        list.add(654);
//        list.add(43);
//        list.add(654);
//        list.add(8765);

//        System.out.println(list.contains(765432));
//        System.out.println(list);
//  you can change the zeroth element to 99
//        list.set(0, 99);
//  you can also remove the index 2 element which is 654 here
//        list.remove(2);
//  you don't have to use Arrays.toString method since ArrayList has its own toString method so you can print it directly
//        System.out.println(list);
// for (int i=0;i<items.size();i++){

        // input
        for (int i = 0; i < 5; i++) {
            list.add(in.nextInt());
        }

        // get item at any index
        for (int i = 0; i < 5; i++) {
            System.out.println(list.get(i)); // pass index here, list[index] syntax will not work here
        }

        System.out.println(list);

}

    }
}
-----------------------------------------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class MultiAL {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();

        // initialisation
        for (int i = 0; i < 3; i++) {
            list.add(new ArrayList<>());
        }

        // add elements
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                list.get(i).add(in.nextInt());
            }
        }

        System.out.println(list);
    }
}
-----------------------------------------------------------------
import java.util.Arrays;

public class Swap2Index {
    public static void main(String[] args) {
        int[] arr = {1, 3, 23, 9, 18, 56};
//        swap(arr, 0, 4);
        reverse(arr);
        System.out.println(Arrays.toString(arr));
    }

    static void reverse(int[] arr) {
        int start = 0;
        int end = arr.length-1;

        while (start < end) {
            // swap
            swap(arr, start, end);
            start++;
            end--;
        }
    }
    static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }
}
-----------------------------------------------------------------
public class Max {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 9, 18};
        System.out.println(maxRange(arr, 1, 3));
    }

    // work on edge cases here, like array being null
    static int maxRange(int[] arr, int start, int end) {

        if (start > end) {
            return -1;
        }

        if (arr == null) {
            return -1;
        }

        int maxVal = arr[start];
        for (int i = start; i <= end; i++) {
            if (arr[i] > maxVal) {
                maxVal = arr[i];
            }
        }
        return maxVal;
    }

    static int max(int[] arr) {
        if (arr.length == 0) {
            return -1;
        }
        int maxVal = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > maxVal) {
                maxVal = arr[i];
            }
        }
        return maxVal;
    }
}
-----------------------------------------------------------------
import java.util.Arrays;

public class PassinginFunctions {
    public static void main(String[] args) {
        int[] nums = {3, 4, 5, 12};
        System.out.println(Arrays.toString(nums));
        change(nums);
        System.out.println(Arrays.toString(nums));
    }
    static void change(int[] arr) {
        arr[0] = 99;
    }
}
-----------------------------------------------------------------
public class PanagramSentence {
    public static void main(String[] args) {
        String sentence = "thequickbrownfoxjumpsoverthelazydog";
        String sentence2 = "leetcode";
        System.out.println(checkIfPangram(sentence));
    }
    static boolean checkIfPangram(String sentence) {
        if (sentence.length() < 26) return false;
        boolean[] seen = new boolean[26]; // Use an array to track seen letters (a-z)

        for (char c : sentence.toCharArray()) {
            int index = Character.toLowerCase(c) - 'a'; // Convert to lowercase and get index (0-25)
            if (index >= 0 && index < 26) {
                seen[index] = true; // Mark the corresponding letter as seen
            }
        }

        // Check if all characters are marked true
        for (boolean b : seen) {
            if (!b) {
                return false;
            }
        }

        return true;
    }
}
-----------------------------------------------------------------
// spiral question1
//  https://leetcode.com/problems/spiral-matrix/
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> ans=new ArrayList<>();
            int row=0 , rowls=matrix.length-1;
            int col=0 , colls=matrix[0].length-1;
            while(row<=rowls && col<=colls){
                for(int i=col; i<=colls; i++){
                    ans.add(matrix[row][i]);
                }
                row++;
                for(int i=row; i<=rowls; i++){
                    ans.add(matrix[i][colls]);
                }
                colls--;
                if(rowls>=row){
                    for(int i=colls; i>=col; i--){
                        ans.add(matrix[rowls][i]);
                    }
                    
                }
                rowls--;
                if(col<=colls){
                    for(int i=rowls; i>=row; i--){
                        ans.add(matrix[i][col]);

                    }
                    
                }
                col++;
            }
        return ans;
    }
}
-----------------------------------------------------------------
// spiral question 2
//  https://leetcode.com/problems/spiral-matrix-ii/
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] ans = new int[n][n];
        int row=0; 
        int rowls=ans.length-1;
        int col=0;
        int colls=ans[0].length-1;
        int num = 1;
        while(row<=rowls && col<=colls){
            for(int i=col; i<=colls; i++){
                    ans[row][i] = num;
                    num++;
                }
                row++;
            for(int i=row; i<=rowls; i++){
                    ans[i][colls] = num;
                    num++;
                }
                colls--;
            if(rowls>=row){
                    for(int i=colls; i>=col; i--){
                        ans[rowls][i] = num;
                        num++;
                    }
                    
                }
                rowls--;
            if(col<=colls){
                    for(int i=rowls; i>=row; i--){
                        ans[i][col] = num;
                        num++;

                    }
                    
                }
            col++;
            }
        return ans;
    }
}
-----------------------------------------------------------------
//  https://leetcode.com/problems/set-matrix-zeroes/
class Solution {
    public void setZeroes(int[][] matrix) {
        ArrayList<Integer> list=new ArrayList<>(10);
        int index =0;
        for (int i = 0; i<matrix.length; i++){
            int zeros = 0;
            for (int j=0; j<matrix[i].length; j++){
                if(matrix[i][j] == 0){
                    list.add(index,j);
                    index++;
                    zeros++;
                }
            }
            if(zeros>0){
                for (int j=0; j<matrix[i].length; j++){
                    matrix[i][j] = 0;
                }
            }
        }
        for(int i=0;i<matrix.length; i++){
            index = 0;
            while(index<list.size()){
                matrix[i][list.get(index)] = 0;
                index++;
            }
        }
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/product-of-array-except-self/
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int arr[] = new int[n];
        int right = 1, left = 1;
        for(int i = 0; i < n; i++) {
            arr[i] = left;
            left = left * nums[i];
        }
        for(int i = n-1; i >= 0; i--) {
            arr[i] *= right;
            right = right * nums[i];
        }
        return arr;
    }
}
-----------------------------------------------------------------
important, if time available please revise
class Solution {
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            digits[i] = 0;
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}
-----------------------------------------------------------------
//  https://leetcode.com/problems/rotate-array/
class Solution {
    public void rotate(int[] nums, int k) {
        if(k==nums.length){
            return;
        }
        if(k>nums.length){
            k = k%nums.length;
        }
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);  
    }
    private void reverse(int[] nums,int l,int h){
        while(l<=h){
        int temp = nums[h];
        nums[h] = nums[l];
        nums[l] = temp;
        l++;
        h--;
    }
    }
}
-----------------------------------------------------------------
//  https://leetcode.com/problems/create-target-array-in-the-given-order/
import java.util.ArrayList;
import java.util.Arrays;

public class example {
    public static void main(String[] args) {
        int[] nums = {0,1,2,3,4};
        int[] index = {0,1,2,2,1};
        int[] ans = createTargetArray(nums, index);
        System.out.println(Arrays.toString(ans));
    }
    static int[] createTargetArray(int[] nums, int[] index) {
            ArrayList<Integer> targetArr=new ArrayList<>();
               for(int i=0;i<nums.length;i++){
                   targetArr.add(index[i],nums[i]);
               }
               int [] target=new int[targetArr.size()];
               for(int i=0;i<targetArr.size();i++){
                   target[i]=targetArr.get(i);
               }
               return target;
           }
        }
-----------------------------------------------------------------
import java.util.ArrayList;
import java.util.List;

public class CountItemsMatching {
    public static void main(String[] args) {
        ArrayList<ArrayList<String>> list = new ArrayList<>();
        ArrayList<String> phone1 = new ArrayList<>();
        phone1.add("phone");
        phone1.add("blue");
        phone1.add("pixel");
        list.add(phone1);
        
        ArrayList<String> computer = new ArrayList<>();
        computer.add("computer");
        computer.add("silver");
        computer.add("lenovo");
        list.add(computer);
        
        ArrayList<String> phone2 = new ArrayList<>();
        phone2.add("phone");
        phone2.add("gold");
        phone2.add("iphone");
        list.add(phone2);
        int ans = countMatches(list, "type", "phone");
        System.out.println(ans);
    }
    static int countMatches(ArrayList<ArrayList<String>> list, String ruleKey, String ruleValue) {
        int count = 0;
        for (int i=0;i<list.size();i++){
            List<String> item = list.get(i);
            if(ruleKey=="type"){
                if(item.get(0).equals(ruleValue)){
                    count++;
                }
            }
            else if(ruleKey == "color"){
                if(item.get(1).equals(ruleValue)){
                    count++;
                }
            }
            else if(ruleKey == "name"){
                if(item.get(2).equals(ruleValue)){
                    count++;
                }
            }
        }
        return count;
    }
    // public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
    //     int count = 0;

    //     for (List<String> item : items) {
    //         int index = 0; // Index of the attribute to compare (type, color, or name)

    //         // Determine the index based on ruleKey
    //         if (ruleKey.equals("type")) {
    //             index = 0;
    //         } else if (ruleKey.equals("color")) {
    //             index = 1;
    //         } else if (ruleKey.equals("name")) {
    //             index = 2;
    //         }

    //         // Check if the corresponding attribute matches the rule value
    //         if (item.get(index).equals(ruleValue)) {
    //             count++;
    //         }
    //     }

    //     return count;
    // }
    // 
    // for (int i = 0; i < items.size(); i++) {
    //     List<String> item = items.get(i); // Use get() for better readability

    //     // Use a switch statement for more efficient ruleKey handling
    //     switch (ruleKey) {
    //         case "type":
    //             if (item.get(0).equals(ruleValue)) {
    //                 count++;
    //             }
    //             break;
    //         case "color":
    //             if (item.get(1).equals(ruleValue)) {
    //                 count++;
    //             }
    //             break;
    //         case "name":
    //             if (item.get(2).equals(ruleValue)) {
    //                 count++;
    //             }
    //             break;
    //         default:
    //             // Handle invalid ruleKey (optional, can throw an exception)
    //             // System.out.println("Invalid ruleKey: " + ruleKey);
    //     }
    // }

    // return count;
}
-----------------------------------------------------------------
public class SumOfDiagonal {
    public static void main(String[] args) {
        
    }
    public int diagonalSum(int[][] mat) {
        int sum = 0;
        for( int i = 0; i<mat.length; i++){
            sum += mat[i][i];
        }
        int index = 0;
        for( int i = mat.length-1; i>=0; i--){
            sum += mat[index][i];
            index++;
        }
        if (mat.length%2!=0){
            sum-=mat[(mat.length-1)/2][(mat.length-1)/2];
        }
        return sum;
    }
    
}
-----------------------------------------------------------------
public class MatrixRotation {
    public static void main(String[] args) {
        int[][] mat = {{0,0,0},{0,1,0},{1,1,1}};
        int[][] target = {{1,1,1},{0,1,0},{0,0,0}};
        boolean ans = findRotation(mat, target);
        System.out.println(ans);
    }
    static boolean findRotation(int[][] mat, int[][] target) {
        boolean p = true, q = true, r = true, s = true;
        
        int n = mat.length;
        int m = mat[0].length;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] != target[i][j]) {
                    p = false;
                }
                if (mat[i][j] != target[n - j - 1][i]) {
                    q = false;
                }
                if (mat[i][j] != target[n - 1 - i][n - 1 - j]) {
                    r = false;
                }
                if (mat[i][j] != target[j][n - 1 - i]) {
                    s = false;
                }
            }
        }
        
        // If any of the conditions is true, it means we have found a rotation that equals the target.
        return p || q || r || s;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/house-robber/
class Solution {
    public int rob(int[] nums) {
        int prevMax = 0;
        int currMax = 0;
        for (int x : nums) {
            int newMax = Math.max(currMax, prevMax + x);
            prevMax = currMax;
            currMax = newMax;
        }
        return currMax;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/house-robber/
solved using dp: link - https://www.youtube.com/watch?v=VXqUQYGMnQg
class Solution {
    public int rob(int[] nums) {
        // If only 1 element, just return it
    if (nums.length < 2)
      return nums[0];

    // Create array to store the maximum loot at each index
    int[] dp = new int[nums.length];

    // Memoize maximum loots at first 2 indexes
    dp[0] = nums[0];
    dp[1] = Math.max(nums[0], nums[1]);

    // Use them to fill complete array
    for (int i = 2; i < nums.length; i++) {

      // Core logic
      dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
    }

    return dp[nums.length - 1];
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/first-missing-positive/
class Solution {
    public int firstMissingPositive(int[] nums) {
        for (int i=0;i<nums.length;i++) {
            while (nums[i]>0 && nums[i]<=nums.length && nums[nums[i]-1] != nums[i]) {
                int t = nums[nums[i]-1];
                nums[nums[i]-1] = nums[i];
                nums[i] = t;
            }
        }

        for (int i=0;i<nums.length;i++) {
            if (nums[i] != i+1) {
                return i+1;
            }
        }
        return nums.length+1;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/max-value-of-equation/
public class examp {
    public static void main(String[] args) {
        // [-19,-12],[-13,-18],[-12,18],[-11,-8],[-8,2],[-7,12],[-5,16],[-3,9],[1,-7],[5,-4],[6,-20],[10,4],[16,4],[19,-9],[20,19]
        int[][] points = {
            {-17,5},
            {-10,-8},
            {-5,-13},
            {-2,7},
            {8,-14}
        };
        int k = 4;
        int ans = findMaxValueOfEquation(points,k);
        System.out.println(ans);
    }
    static int findMaxValueOfEquation(int[][] points, int k) {
        int [] cor = new int[points.length];
        int eq = 0;
        int l = 0;
        int min = Integer.MIN_VALUE;
        for( int i=0; i<points.length-1; i++){
            int max = Integer.MIN_VALUE;
            int j=i+1;
            while(j<points.length){
                if(Math.abs(points[j][0]-points[i][0])<=k){
                    eq = points[i][1]+points[j][1]+Math.abs(points[i][0]-points[j][0]);
                    max = Math.max(max,eq);
                    cor[i] = max;
                    if(j == points.length-1){
                        l++;
                    }
                }
                j++;
            }
        }for( int i=0; i<l; i++){
            min = Math.max(min,cor[i]);
        }
        return min;
    }
}
//  https://leetcode.com/problems/max-value-of-equation/solutions/2167138/array-fast-6ms-easy-simple-clean-code/
// class Solution {
//     public int findMaxValueOfEquation(int[][] points, int k) {
//         int max = Integer.MIN_VALUE; //assign the lowest number
//         int res = 0;
//         int mod = 0;
//         int flag = 1;
//         for(int i = 0;i<points.length-1;i++) //iteration over the points
//         {
//             if(flag<i+1)
//                 flag = i+1;
//             for(int j = flag;j<points.length;j++) 
// 			//iteration over the points again so that we can deliver the variables in the equation
//             {
//                 mod = points[i][0]-points[j][0]; 
//                 if(mod<0)
//                     mod = -mod;
//                 if(mod>k)
//                     break;
//                 res = points[i][1]+points[j][1]+mod; //final equation 
//                 if(max<res)
//                 {
//                     max = res; //updation of max
//                     flag = j;
//                 }
//             }
//         }
//         return max;
//     }
// }
-----------------------------------------------------------------
https://leetcode.com/problems/find-missing-observations/ imp
class Solution {
    public int[] missingRolls(int[] rolls, int mean, int n) {
        int m = rolls.length; 
        int sum = 0; //sum(m)
        for (int ele : rolls) sum += ele;

        int rem = mean * (m + n) - sum; //sum(n)

        //check whether the missing dice rolls between 
        //n (if all rolls are 1) and 6 * n (if all rolls are 6)
        if (rem > 6 * n || rem < n) return new int[0]; 

        int dist = rem / n;
        int mod = rem % n;
        int [] res = new int[n];

        for (int i = 0 ; i < n ; i++) res[i] = dist;

        for (int i = 0 ; i < mod ; i++) res[i]++;

        return res;
    }
}
-----------------------------------------------------------------
https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k
class Solution {
    public boolean canArrange(int[] arr, int k) {
        int [] freq = new int[k];
        for(int num: arr){
            int rem = num % k;
            if(rem < 0){
                rem = rem + k;
            }
            freq[rem]++;
        }
        if(freq[0] % 2 != 0){
            return false;
        }
        for(int i = 1;i <= k / 2;i++){
            if(freq[i] != freq[k-i]) {
                return false;
            }
        }
        return true;
    }
}
-----------------------------------------------------------------
